// Date.h
#ifndef DATE_H
#define DATE_H

#include <iostream>
#include <string>

class Date {
private:
    int month;
    int day;
    int year;
    
    bool isValidDate(int m, int d, int y);
    bool isLeapYear(int y) const;
    int lastDay(int m, int y) const;

public:
    Date(int m = 1, int d = 1, int y = 1900);
    void setDate(int m, int d, int y);
    int getMonth() const { return month; }
    int getDay() const { return day; }
    int getYear() const { return year; }
    
    bool isLeapYear() const;
    int lastDay() const;
    
    std::string format1() const;
    std::string format2() const;
    std::string format3() const;
};

#endif

// Date.cpp
#include "Date.h"

bool Date::isValidDate(int m, int d, int y) {
    if (m < 1 || m > 12) return false;
    if (d < 1 || d > lastDay(m, y)) return false;
    return y > 0;
}

bool Date::isLeapYear(int y) const {
    return (y % 4 == 0 && y % 100 != 0) || (y % 400 == 0);
}

int Date::lastDay(int m, int y) const {
    static const int daysInMonth[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    if (m == 2 && isLeapYear(y)) return 29;
    return daysInMonth[m - 1];
}

Date::Date(int m, int d, int y) {
    setDate(m, d, y);
}

void Date::setDate(int m, int d, int y) {
    if (isValidDate(m, d, y)) {
        month = m;
        day = d;
        year = y;
    } else {
        month = 1;
        day = 1;
        year = 1900;
    }
}

bool Date::isLeapYear() const {
    return isLeapYear(year);
}

int Date::lastDay() const {
    return lastDay(month, year);
}

std::string Date::format1() const {
    return std::to_string(month) + "/" + std::to_string(day) + "/" + std::to_string(year);
}

std::string Date::format2() const {
    static const std::string monthNames[] = {"", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
    return monthNames[month] + " " + std::to_string(day) + ", " + std::to_string(year);
}

std::string Date::format3() const {
    static const std::string monthNames[] = {"", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
    return std::to_string(day) + " " + monthNames[month] + " " + std::to_string(year);
}

// main.cpp
#include "Date.h"

int main() {
    Date defaultDate;
    std::cout << "Test default constructor: " << defaultDate.format1() << "\n";

    Date validDate(2, 28, 2009);
    std::cout << "Test constructor with valid date: " << validDate.format1() << "\n";

    Date invalidMonth(45, 2, 2009);
    std::cout << "Test constructor with invalid month (45, 2, 2009): " << invalidMonth.format1() << "\n";

    Date invalidDay(2, 29, 2009);
    std::cout << "Test constructor with invalid day (2/29/2009): " << invalidDay.format1() << "\n";

    return 0;
}
